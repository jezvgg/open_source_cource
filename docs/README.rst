
Разделение проекта на подзадачи
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Задание было разбито на 3 основные части:


#. Реализация логический функций (core) - конвертации
#. Реализация веб-сервера на FastAPI
#. Реализация CLI клиента

Также для каждой части должны быть реализованы тесты.

Стркутура проекта:
^^^^^^^^^^^^^^^^^^

.. code-block::

   .
   ├── app
   │   ├── __init__.py
   │   └── routers
   │       ├── __init__.py
   │       ├── items.py
   │       └── users.py
   ├── core
   │   ├── converter.py
   │   ├── deconverter.py
   │   └── enums
   │       ├── convert_type.py
   │       └── __init__.py
   ├── cli
   │   тут ещё что-то дополним
   ├── tests
   │   ├── core_tests
   │       ├── тут ещё дополним
   │   ├── server_tests
   │       ├── test_item_service.py
   │       └── test_user_service.py
   │   ├── cli_tests
   │       ├── тут ещё дополним
   └── main.py

Где:


* main.py - точка входа в веб-сервер
* app - папка, в которой модули для веб-сервера
* app/routers - сервисы для веб-сервера
* core - папка реализаций логической части приложения, в нашем случае конвертации туда и обратно
* cli - папка в которой реализация CLI клиента
* tests - автотесты для всего

Нужно знать про реализацию
^^^^^^^^^^^^^^^^^^^^^^^^^^

..

   **!** Для корректной работы проекта, с ним нужно работать с папки **testing_mocks**


Также был создан Makefile, для простого запуска автотестов и программ.

.. code-block::

   make tests - запускает автотесты через pytest
   make run - запускает веб-сервер

Все хранения файлов у нас орагнизованно прямо в оперативной памяти (это, конечно плохо, но вроде и не интерпрайс продукт). При этом файлы находяться в объекте io.BytesIO, что позволяет быстро и просто их сохранять на диски, если это понадобиться, а также реализовывать настоящую асинхронность, также если понадобиться.
Пример:

.. code-block:: python

   def convert(self, argument: ConvertType, obj: object) -> io.BytesIO:

Распределение задач:
^^^^^^^^^^^^^^^^^^^^

**Воловиков Георгий Александрович**\ :


#. Управление проектом, распределение задач, написание README и т.д. (тимлид крч)
#. Реализация веб-сервера на FastAPI

**Горбачевский Даниил Анатольевич**\ :


#. Реализация логиеской части проекта (core)
#. Реализация CLI клиента
